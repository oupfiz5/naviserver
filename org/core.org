#+title: Naviserver on ubuntu image
* Auxiliary Information                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: auxiliary-information
:END:
The setupfile contain global common property configuration:
#+SETUPFILE: .configuration/global_vars_org.setup
#+SETUPFILE: .configuration/global_property_org.setup
#+SETUPFILE: .configuration/global_vars_html.setup
#+EXPORT_FILE_NAME: ../Readme
#+OPTIONS: auto-id:t

* About
:PROPERTIES:
:CUSTOM_ID: about
:END:
This is [[https://wiki.tcl-lang.org/page/NaviServer][NaviServer]] on [[https://hub.docker.com/_/ubuntu][ubuntu base docker image]] (version 20.04).  To install the NaviServer I used code from  [[https://github.com/gustafn/install-ns][Gustaf Neumann]] script [[https://github.com/gustafn/install-ns/blob/master/install-oacs.sh][install-ns.sh]].   The base image is [[https://hub.docker.com/_/ubuntu][ubuntu]].

Naviserver is self-hosting at https://chiselapp.com/user/oupfiz5/repository/naviserver.

If you are reading this on GitHub, then you are looking at a Git mirror of the self-hosting Naviserver repository.  The purpose of that mirror is to test and exercise Fossil's ability to export a Git mirror and using Github CI/CD  (Github Actions). Nobody much uses the GitHub mirror, except to verify that the mirror logic works. If you want to know more about Naviserver, visit the official self-hosting site linked above.

* Table of Contents :TOC_3:noexport:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
- [[#about][About]]
- [[#prerequisite][Prerequisite]]
  - [[#tools][Tools]]
  - [[#third-party-tools][Third party tools]]
- [[#installation][Installation]]
  - [[#download-from-dockerhub][Download from dockerhub]]
  - [[#build-from-chiselapp-fossil][Build from chiselapp (fossil)]]
  - [[#build-from-github][Build from github]]
  - [[#configuration][Configuration]]
    - [[#build-arguments][Build arguments]]
    - [[#example-of-build][Example of build]]
- [[#configuration-options][Configuration options]]
  - [[#general-options][General options]]
  - [[#timezone][Timezone]]
  - [[#http-listen-port][HTTP listen port]]
  - [[#configuration-file][Configuration file]]
- [[#quickstart][Quickstart]]
- [[#continues-integration][Continues integration]]
- [[#troubleshooting][Troubleshooting]]
  - [[#log-output][Log output]]
  - [[#shell-access][Shell access]]

* Prerequisite
:PROPERTIES:
:CUSTOM_ID: prerequisite
:END:
** Tools
:PROPERTIES:
:CUSTOM_ID: tools
:END:
1. *nix operation system
2. Install Docker
3. Install git (optional)
4. Install fossil (optional)
** Third party tools
:PROPERTIES:
:CUSTOM_ID: third-party-tools
:END:
They are using for testing and scanning:
1. [[https://github.com/bats-core][Bats]]
2. [[https://www.shellcheck.net/][Shellcheck]]
3. [[https://github.com/hadolint/hadolint][Hadolynt]]
4. [[https://github.com/goodwithtech/dockle][Dockle]]
5. Snyk - not necessarily
6. Trivy - not necessarily
* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
** Download from dockerhub
:PROPERTIES:
:CUSTOM_ID: download-from-dockerhub
:END:
#+begin_src sh :tangle no :noweb yes
   docker pull oupfiz5/naviserver:4.99.23
#+end_src

** Build from chiselapp (fossil)
:PROPERTIES:
:CUSTOM_ID: build-from-chiselapp--fossil-
:END:
#+begin_src sh :tangle no :noweb yes
fossil clone https://chiselapp.com/user/oupfiz5/repository/naviserver    naviserver.fossil
mkdir naviserver
cd naviserver
fossil open ../naviserver.fossil
#+END_SRC

Build image using multi steps  (by means of docker from [[https://hub.docker.com/repository/docker/oupfiz5/tcl-build][oupfiz5/tcl-build]]):
#+begin_src sh :tangle no :noweb yes
docker build -t oupfiz5/naviserver:4.99.23 -f ./Dockerfile .
#+end_src

** Build from github
:PROPERTIES:
:CUSTOM_ID: build-from-github
:END:
 #+begin_src sh :tangle no :noweb yes
 git clone https://github.com/oupfiz5/naviserver.git
 cd naviserver
 docker build -t oupfiz5/naviserver .
 #+end_src


Build image using multi steps  (by means of docker from [[https://hub.docker.com/repository/docker/oupfiz5/tcl-build][oupfiz5/tcl-build]]):
#+begin_src sh :tangle no :noweb yes
docker build -t oupfiz5/naviserver:4.99.23 -f ./Dockerfile .
#+end_src

** Configuration
:PROPERTIES:
:CUSTOM_ID: configuration
:END:
*** Build arguments
:PROPERTIES:
:CUSTOM_ID: build-arguments
:END:
 |-------------------+---------+----------------------------------------|
 | Arguments         | Default | Description                            |
 |-------------------+---------+----------------------------------------|
 | BUILD_DATE        |    none | Set build date for label               |
 |-------------------+---------+----------------------------------------|
 | NS_VERSION        | 4.99.23 | Define version for Naviserver          |
 |-------------------+---------+----------------------------------------|
 | NS_MODULE_VERSION | 4.99.23 | Define version for Naviserver  modules |
 |-------------------+---------+----------------------------------------|
 | TCL_VERSION       |  8.6.11 | Define version for  tcl                |
 |-------------------+---------+----------------------------------------|
 | TCLLIB_VERSION    |  1.1.20 | Define version for  tcllib             |
 |-------------------+---------+----------------------------------------|
 | TDOM_VERSION      |   0.9.1 | Define version for tdom                |
 |-------------------+---------+----------------------------------------|
 | RL_JSON_VERSION=  |  0.11.1 | Define version for rl_json             |
 |-------------------+---------+----------------------------------------|
 | XOTCL_VERSION     |   2.3.0 | Define version for xotcl               |
 |-------------------+---------+----------------------------------------|
*** Example of build
:PROPERTIES:
:CUSTOM_ID: example-of-build
:END:
#+begin_src sh :tangle no :noweb yes
 docker build --no-cache \
         --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
         --build-arg NS_VERSION='4.99.23' \
         --build-arg TCL_VERSION='8.6.11' \
         -t oupfiz5/naviserver:4.99.23 \
         -f ../Dockerfile \
          ../.
#+END_SRC
* Configuration options
:PROPERTIES:
:CUSTOM_ID: configuration-options
:END:
** General options
:PROPERTIES:
:CUSTOM_ID: general-options
:END:
 |--------------------+----------------+-------------------------------------|
 | Option             | Default        | Description                         |
 |--------------------+----------------+-------------------------------------|
 | TZ                 | UTC            | Set timezone, example Europe/Moscow |
 |--------------------+----------------+-------------------------------------|
 | HTTP               | 8090           | Set http listen port, example 18090 |
 |--------------------+----------------+-------------------------------------|
 | [[Configuration file][Configuration file]] | nsd-config.tcl | Configuration file for Naviserver   |
 |--------------------+----------------+-------------------------------------|

** Timezone
:PROPERTIES:
:CUSTOM_ID: timezone
:END:
Set the timezone for the container, defaults to UTC. To set the timezone set the desired timezone with the variable TZ.
#+begin_src sh :tangle no :noweb yes
docker run -itd \
       --restart always \
       --name=naviserver \
       --env 'TZ=Europe/Moscow' \
       -p 127.0.0.1:8090:8080 \
       oupfiz5/naviserver:4.99.23
#+END_SRC

** HTTP listen port
:PROPERTIES:
:CUSTOM_ID: http-listen-port
:END:

Set the http listen port for the container =-p 127.0.0.1:18090:8080=.  In this case the Naviserver is accessible by URL [[http://localhost:8090][http://localhost:18090]].
#+begin_src sh :tangle no :noweb yes
docker run -itd \
       --restart always \
       --name=naviserver \
       -p 127.0.0.1:18090:8080 \
       oupfiz5/naviserver:4.99.23
#+END_SRC
** Configuration file
:PROPERTIES:
:CUSTOM_ID: configuration-file
:END:
The default configuration file is =rootfs/usr/local/ns/conf/nsd-config.tcl=.  For using own configuration file you can apply docker mount option:
1. Create own configuration file with name =nsd-config.tcl=
2. Put it to some directory (for example =rootfs/usr/local/ns/conf/test=)
3. Mount the the directory from item 2 as =/usr/local/ns/conf=
  #+begin_src sh :tangle no :noweb yes
docker run -itd \
       --restart always \
       --name=naviserver  \
       -p 127.0.0.1:8090:8080 \
       --mount type=bind,src=$(pwd)/rootfs/usr/local/ns/conf/test,destination=/usr/local/ns/conf \
       oupfiz5/naviserver:4.99.23
  #+END_SRC

* Quickstart
:PROPERTIES:
:CUSTOM_ID: quickstart
:END:
Start Naviserver using CLI:
#+BEGIN_SRC sh :tangle no
docker run -itd \
       --restart always \
       --name=naviserver \
       -p 127.0.0.1:8090:8080 \
       oupfiz5/naviserver:4.99.23
#+END_SRC

Start Naviserver using script =start.sh=:
#+begin_src sh :tangle no :noweb yes :dir ../src/
./start.sh
#+END_SRC
After start open the naviserver will be accessible by url =http://localhost:8090=
* Continues integration
:PROPERTIES:
:CUSTOM_ID: continues-integration
:END:
For  build and push docker images using  [[https://github.com/oupfiz5/naviserver/blob/master/.github/workflows/on-push.yaml][Github Actions workflow]]. Flow process is [[https://guides.github.com/introduction/flow/][GitHub flow]].
* Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:
** Log output
:PROPERTIES:
:CUSTOM_ID: log-output
:END:
For debugging and maintenance purposes you may want access the output log. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker interactive:

#+begin_src sh :tangle no :noweb yes
docker run -it --rm \
       --name=naviserver \
       -p 127.0.0.1:8090:8080 \
       oupfiz5/naviserver:latest
#+END_SRC

** Shell access
:PROPERTIES:
:CUSTOM_ID: shell-access
:END:
For debugging and maintenance purposes you may want access the containers shell. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker exec:
#+begin_src sh :tangle no :noweb yes
docker exec -it naviserver /bin/bash
#+END_SRC

* Code :code:noexport:
:PROPERTIES:
:CUSTOM_ID: code
:END:
** VERSIONS :code:
:PROPERTIES:
:CUSTOM_ID: versions
:END:
#+begin_src sh :shebang ""
  # * Version
  NS_VERSION="${NS_VERSION:-4.99.23}"
  NS_MODULES_VERSION="${NS_MODULES_VERSION:-4.99.23}"
  RL_JSON_VERSION="${RL_JSON_VERSION:-0.11.1}"
  TDOM_VERSION="${TDOM_VERSION:-0.9.1}"
  THREAD_VERSION="${THREAD_VERSION:-2.8.6}"
  TCL_VERSION="${TCL_VERSION:-8.6.11}"
  TCLLIB_VERSION="${TCLLIB_VERSION:-1.20}"
  XOTCL_VERSION="${XOTCL_VERSION:-2.3.0}"

  CONTAINER_NAME="${CONTAINER_NAME:-naviserver}"
  NS_IMAGE_TAG="${NS_IMAGE_TAG:-4.99.23}"
  IMAGE_NAME="${IMAGE_NAME:-naviserver}"
  IMAGE_REPOSITORY="${IMAGE_REPOSITORY:-oupfiz5}"
  IMAGE_TAG="${IMAGE_TAG:-${NS_IMAGE_TAG}}"
  TCL_BUILD_IMAGE_REPOSITORY="${TCL_BUILD_IMAGE_REPOSITORY:-oupfiz5}"
  TCL_BUILD_IMAGE_NAME="${TCL_BUILD_IMAGE_NAME:-tcl-build}"
  TCL_BUILD_IMAGE_TAG="${TCL_BUILD_IMAGE_TAG:-22.01}"
  UBUNTU_IMAGE_REPOSITORY=""
  UBUNTU_IMAGE_NAME="${UBUNTU_IMAGE_NAME:-ubuntu}"
  UBUNTU_IMAGE_TAG="${UBUNTU_IMAGE_TAG:-20.04}"
#+end_src
** ../.fossil-settings/crlf-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob
:END:
#+begin_src sh :shebang ""
  *
#+end_src
** ../.fossil-settings/crlf-glob.no-warn
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob-no-warn
:END:
#+begin_src sh :shebang ""
  *
#+end_src
** ../.fossil-settings/ignore-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-ignore-glob
:END:
#+begin_src sh :shebang ""
  .git/
  .github-mirroring/*
  docs/
  org/.configuration/*
  tests/.bats-battery/*/.git
  tests/.bats-battery/*/.github
#+end_src
** ../.fossil-settings/crlf-glob
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob
:END:
#+begin_src sh :shebang ""
  *
#+end_src
** ../.github/workflows/on-push.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-on-push-yaml
:END:
#+begin_src yaml :shebang ""
  name: Build and push docker images

  on:
    push:
      branches:
        - master
        - main
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile*'
        - 'src/rootfs/**'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'src/VERSIONS'
        - 'tests/**'
    pull_request:
      branches:
        - master
        - main
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile'
        - 'src/rootfs/**'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'tests/**'
        - 'src/VERSIONS'
  jobs:
    build:
      name: Build and push image to dockerhub
      runs-on: ubuntu-latest
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Login to DockerHub Registry
          run: |
            echo  ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

        - name: Naviserver. Build and push image.
          run: |
            echo "::group::Prepare environment"
            set -a; source ${GITHUB_WORKSPACE}/src/VERSIONS ; set +a;
            cd ${GITHUB_WORKSPACE}/src/hook
            echo "::endgroup::"
            echo "::group::Build image"
            ./build.sh
            echo "::endgroup::"
            echo "::group::Push image"
            ./push.sh
            echo "::endgroup::"
#+end_src
** ../.github/workflows/test.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-test-yaml
:END:
#+begin_src yaml :shebang ""
  name: Tests

  # * Controls
  # Controls when the action will run.
  on:
    push:
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile*'
        - 'src/rootfs/**'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'tests/**'
        - 'src/VERSIONS'
      branches-ignore:
        - 'master'
        - 'main'
    pull_request:
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile'
        - 'src/rootfs/**'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'tests/**'
        - 'src/VERSIONS'
      branches-ignore:
        - 'master'
        - 'main'
    workflow_dispatch:

  # * Environments
  env:
    IMAGE_TAG: "${{ github.sha }}"

  # * Jobs
  jobs:
    checks:
      name: Tests and Checks
      runs-on: ubuntu-20.04
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Check shell files (shellcheck)
          run: |
            sudo apt-get update -y
            sudo apt-get install shellcheck
            cd ${GITHUB_WORKSPACE}/tests
            .bats-battery/bats-core/bin/bats 01.shellchecks.bats

        - name: Check Dockerfile (hadolint)
          run: |
            cd ${GITHUB_WORKSPACE}/tests
            .bats-battery/bats-core/bin/bats 02.dockerfile_check.bats

        - name: Naviserver. Build. Check image and container.
          run: |
            echo "::group::Build image"
            echo "Build image"
            set -a; source ${GITHUB_WORKSPACE}/src/VERSIONS ; set +a;
            export IMAGE_TAG="${{ github.sha }}"
            cd ${GITHUB_WORKSPACE}/src/hook
            ./build.sh
            echo "::endgroup::"

            echo "::group::Check image and container"
            cd ${GITHUB_WORKSPACE}/tests
            echo "Check docker image (dockle)"
            .bats-battery/bats-core/bin/bats 03.docker_image_check.bats
            echo "Check docker container"
            .bats-battery/bats-core/bin/bats 04.container_check.bats
            echo "::endgroup::"
#+end_src
** ../.github/.trigger_on_push :code:
:PROPERTIES:
:CUSTOM_ID: ----github--trigger-on-push
:END:
#+begin_src sh :shebang ""
  Trigger: 3
#+end_src
** ../.gitignore :code:
:PROPERTIES:
:CUSTOM_ID: ----gitignore
:END:
#+begin_src sh :shebang ""
  .fslckout
  .projectile
  .fossil-settings/*
#+end_src
** Dockerfile :code:
:PROPERTIES:
:CUSTOM_ID: dockerfile
:END:
#+begin_src sh :shebang ""
  # * Arguments
  ARG \
      NS_MODULES_VERSION="${NS_MODULES_VERSION}" \
      NS_VERSION="${NS_VERSION}" \
      RL_JSON_VERSION="${RL_JSON_VERSION}" \
      TCLLIB_VERSION="${TCLLIB_VERSION}" \
      TCL_BUILD_IMAGE_NAME="${TCL_BUILD_IMAGE_NAME}" \
      TCL_BUILD_IMAGE_REPOSITORY="${TCL_BUILD_IMAGE_REPOSITORY}" \
      TCL_BUILD_IMAGE_TAG="${TCL_BUILD_IMAGE_TAG}" \
      TCL_VERSION="${TCL_VERSION}" \
      TDOM_VERSION="${TDOM_VERSION}" \
      THREAD_VERSION="${THREAD_VERSION}" \
      UBUNTU_IMAGE_NAME="${UBUNTU_IMAGE_NAME}" \
      UBUNTU_IMAGE_TAG="${UBUNTU_IMAGE_TAG}" \
      UBUNTU_IMAGE_REPOSITORY="${UBUNTU_IMAGE_REPOSITORY}" \
      XOTCL_VERSION="${XOTCL_VERSION}"

  # * Build software
  FROM ${TCL_BUILD_IMAGE_REPOSITORY}/${TCL_BUILD_IMAGE_NAME}:${TCL_BUILD_IMAGE_TAG} as build

  # ** Environmen
  ENV NS_VERSION="${NS_VERSION}" \
      NS_MODULES_VERSION="${NS_MODULES_VERSION}" \
      RL_JSON_VERSION_VERSION="${RL_JSON_VERSION_VERSION}" \
      TCLLIB_VERSION="${TCLLIB_VERSION}" \
      TCL_VERSION="${TCL_VERSION}" \
      TDOM_VERSION="${TDOM_VERSION}" \
      THREAD_VERSION="${THREAD_VERSION}" \
      XOTCL_VERSION="${XOTCL_VERSION}"

  # ** Build
  WORKDIR /
  RUN mkdir /workspaces
  COPY builds /builds
  RUN  /bin/bash /builds/all-build.sh

  # * From
  FROM ${UBUNTU_IMAGE_NAME}:${UBUNTU_IMAGE_TAG}

  # ** Copy Naviserver
  WORKDIR /
  COPY --from=build /usr/local/ns /usr/local/ns/

  # ** Labels
  # hadolint ignore=DL3048
  LABEL \
      maintainer="Oupfiz V <oupfiz5@yandex.ru>" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.authors="Oupfiz V (Five)" \
      org.opencontainers.image.url="https://chiselapp.com/user/oupfiz5/repository/naviserver/home" \
      org.opencontainers.image.documentation="https://chiselapp.com/user/oupfiz5/repository/naviserver/wiki" \
      org.opencontainers.image.source="https://chiselapp.com/user/oupfiz5/repository/naviserver/brlist" \
      org.opencontainers.image.version="0.0.1d" \
      org.opencontainers.image.revision="" \
      org.opencontainers.image.vendor="" \
      org.opencontainers.image.licenses="" \
      org.opencontainers.image.ref.name="" \
      org.opencontainers.image.title="NaviServer on ubuntu base docker image" \
      org.opencontainers.image.description="NaviServer on ubuntu base docker image" \
      custom.package.version.naviserver="${NS_VERSION}" \
      custom.package.version.naviserver_modules="${NS_MODULES_VERSION}" \
      custom.package.version.rl_json_version="${RL_JSON_VERSION}" \
      custom.package.version.tcl="${TCL_VERSION}" \
      custom.package.version.tcllib="${TCLLIB_VERSION}" \
      custom.package.version.tdom="${TDOM_VERSION}" \
      custom.package.version.thread="${THREAD_VERSION}" \
      custom.package.version.xotcl="${XOTCL_VERSION}"

  # ** Run
  # hadolint ignore=DL3008
  RUN export LANG="en_US.UTF-8" \
      && export LC_ALL="en_US.UTF-8" \
      && apt-get update \
      && export DEBIAN_FRONTEND=noninteractive \
      && apt-get -y --no-install-recommends install libssl-dev locales libpq-dev postgresql-client wget \
      && locale-gen en_US.UTF-8 \
      && update-locale LANG="en_US.UTF-8" \
      && update-locale LC_ALL="en_US.UTF-8" \
      && apt-get clean \
      && apt-get auto-remove -y \
      && rm -rf /tmp/* /var/lib/apt/lists/* /var/cache/apt/* \
      && groupadd nsadmin \
      && useradd -g nsadmin nsadmin \
      && chown -R  nsadmin:nsadmin /usr/local/ns

  # ** Copy naviserver configurations
  COPY rootfs/usr/local/ns/conf /usr/local/ns/conf

  # ** Expose
  EXPOSE 8080

  # ** Environment
  Env NS_CONF="/usr/local/ns/conf/nsd-config.tcl"

  # ** Workdir
  WORKDIR /usr/local/ns

  # ** Entrypoint
  ENTRYPOINT ["/usr/local/ns/bin/nsd"]

  # ** Cmd
  CMD [ "-f", "-u","nsadmin","-g","nsadmin","-t", "/usr/local/ns/conf/nsd-config.tcl"]
#+end_src
** hook/build.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-build-sh
:END:
#+begin_src sh
    # shellcheck disable=SC1091
    set -a; source ../VERSIONS ; set +a;
    source ../builds/env-vars.sh

    IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
    DOCKERFILE="${DOCKERFILE:-Dockerfile}"

    docker build --no-cache \
           --build-arg UBUNTU_IMAGE_REPOSITORY="${UBUNTU_IMAGE_REPOSITORY}" \
           --build-arg UBUNTU_IMAGE_NAME="${UBUNTU_IMAGE_NAME}" \
           --build-arg UBUNTU_IMAGE_TAG="${UBUNTU_IMAGE_TAG}" \
           --build-arg TCL_BUILD_IMAGE_REPOSITORY="${TCL_BUILD_IMAGE_REPOSITORY}" \
           --build-arg TCL_BUILD_IMAGE_NAME="${TCL_BUILD_IMAGE_NAME}" \
           --build-arg TCL_BUILD_IMAGE_TAG="${TCL_BUILD_IMAGE_TAG}" \
           --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
           --build-arg VERSION="${NS_IMAGE_TAG}" \
           --build-arg NS_VERSION="${NS_VERSION}" \
           --build-arg NS_MODULES_VERSION="${NS_MODULES_VERSION}" \
           --build-arg RL_JSON_VERSION="${RL_JSON_VERSION}" \
           --build-arg TCLLIB_VERSION="${TCLLIB_VERSION}" \
           --build-arg TCL_VERSION="${TCL_VERSION}" \
           --build-arg TDOM_VERSION="${TDOM_VERSION}" \
           --build-arg THREAD_VERSION="${THREAD_VERSION}" \
           --build-arg XOTCL_VERSION="${XOTCL_VERSION}" \
           -t "${IMAGE}" \
           -f ../"${DOCKERFILE}" \
           ../.
#+end_src
** hook/push.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-push-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :dir ../src/hook
  # shellcheck disable=SC1091
  set -a; source ../VERSIONS ; set +a;

  IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"

  docker push "${IMAGE}"
#+end_src

** rootfs/usr/local/ns/conf/nsd-config.tcl :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-usr-local-ns-conf-nsd-config-tcl
:END:
#+name: rootfs/usr/local/ns/conf/ns-config.tcl
#+begin_src tcl :shebang ""
########################################################################
# Sample config file for NaviServer
########################################################################

#
# Set the IP-address and port, on which the server listens:
#
set port 8080
set address "0.0.0.0"  ;# one might use as well for IPv6: set address ::

#
# Get the "home" directory from the currently executing binary.
# We could do alternatively:
#    set home /usr/local/ns
#
set home [file dirname [file dirname [info nameofexecutable]]]


########################################################################
# Global settings (for all servers)
########################################################################

ns_section "ns/parameters" {
    ns_param    home                $home
    ns_param    tcllibrary          tcl
    #ns_param   tclinitlock         true     ;# default: false
    ns_param    serverlog           error.log
    #ns_param   pidfile             ${home}/logs/nsd.pid
    #ns_param   logdebug            true     ;# default: false
    #ns_param   logroll             false    ;# default: true
    #ns_param	logrollfmt	    %Y-%m-%d ;# format appended to log file name
    #ns_param   logusec             true     ;# add timestamps in microsecond (usec) resolution (default: false)
    #ns_param   logusecdiff         true     ;# add timestamp diffs since in microsecond (usec) resolution (default: false)
    #ns_param   sanitizelogfiles    2        ;# default: 2; 0: none, 1: full, 2: human-friendly

    #ns_param   dbcloseonexit       off      ;# default: off; from nsdb
    ns_param    jobsperthread       1000     ;# default: 0
    #ns_param   jobtimeout          0s       ;# default: 5m
    ns_param	joblogminduration   100s       ;# default: 1s
    ns_param    schedsperthread     10       ;# default: 0
    #ns_param	schedlogminduration 2s       ;# print warnings when scheduled job takes longer than that
    ns_param    progressminsize     1MB      ;# default: 0
    #ns_param   concurrentinterpcreate true  ;# default: false
    #ns_param   listenbacklog       256      ;# default: 32; backlog for ns_socket commands
    #ns_param   mutexlocktrace      true     ;# default false; print durations of long mutex calls to stderr

    # Reject output operations on already closed connections (e.g. subsequent ns_return statements)
    #ns_param   rejectalreadyclosedconn false ;# default: true

    # configure SMTP module
    ns_param    smtphost            "localhost"
    ns_param    smtpport            25
    ns_param    smtptimeout         60
    ns_param    smtplogmode         false
    ns_param    smtpmsgid           false
    ns_param    smtpmsgidhostname   ""
    ns_param    smtpencodingmode    false
    ns_param    smtpencoding        "utf-8"
    ns_param    smtpauthmode        ""
    ns_param    smtpauthuser        ""
    ns_param    smtpauthpassword    ""
}

ns_section "ns/threads" {
    ns_param    stacksize           512kB
}

ns_section "ns/mimetypes" {
    ns_param    default             text/plain
    ns_param    noextension         text/plain
}

ns_section "ns/fastpath" {
    ns_param    cache               false      ;# default: false
    ns_param    cachemaxsize        10MB       ;# default: 10MB
    ns_param    cachemaxentry       8kB        ;# default: 8kB
    ns_param    mmap                false      ;# default: false
    ns_param    gzip_static         true       ;# check for static gzip; default: false
    ns_param    gzip_refresh        true       ;# refresh stale .gz files on the fly using ::ns_gzipfile
    ns_param    gzip_cmd            "/usr/bin/gzip -9"  ;# use for re-compressing
    ns_param    brotli_static       true       ;# check for static brotli files; default: false
    ns_param    brotli_refresh      true       ;# refresh stale .br files on the fly using ::ns_brotlifile
    ns_param    brotli_cmd          "/usr/bin/brotli -f -Z"  ;# use for re-compressing
    #ns_param   brotli_cmd          "/opt/local/bin/brotli -f -Z"  ;# use for re-compressing (macOS + ports)
}

ns_section ns/servers {
    ns_param default "My First NaviServer Instance"
}

#
# Global modules (for all servers)
#
ns_section "ns/modules" {
    ns_param    nssock              nssock
}

ns_section "ns/module/nssock" {
    ns_param    defaultserver            default
    ns_param    port                     $port
    ns_param    address                  $address     ;# Space separated list of IP addresses
    #ns_param    hostname                [ns_info hostname]
    ns_param    maxinput                 10MB         ;# default: 1MB, maximum size for inputs (uploads)
    #ns_param   readahead                1MB          ;# default: 16384; size of readahead for requests
    ns_param    backlog                  1024         ;# default: 256; backlog for listen operations
    ns_param    acceptsize               10           ;# default: value of "backlog"; max number of accepted (but unqueued) requests
    ns_param    closewait                0s           ;# default: 2s; timeout for close on socket
    ns_param    maxqueuesize             1024         ;# default: 1024; maximum size of the queue
    ns_param    keepwait		 5s	      ;# 5s, timeout for keep-alive
    ns_param    keepalivemaxuploadsize	 0.5MB	      ;# 0, don't allow keep-alive for upload content larger than this
    ns_param    keepalivemaxdownloadsize 1MB          ;# 0, don't allow keep-alive for download content larger than this
    #
    # TCP tuning
    #
    #ns_param  nodelay         false   ;# true; deactivate TCP_NODELAY if Nagle algorithm is wanted
    #
    # Spooling Threads
    #
    #ns_param   spoolerthreads		1	;# default: 0; number of upload spooler threads
    ns_param    maxupload		1MB     ;# default: 0, when specified, spool uploads larger than this value to a temp file
    ns_param    writerthreads		1	;# default: 0, number of writer threads
    #ns_param   writersize		1MB	;# default: 1MB, use writer threads for files larger than this value
    #ns_param   writerbufsize		8kB	;# default: 8kB, buffer size for writer threads
    #ns_param   driverthreads           2	;# default: 1, number of driver threads (requires support of SO_REUSEPORT)

    # Extra driver-specific response header fields (probably for nsssl)
    #ns_param   extraheaders  {Strict-Transport-Security "max-age=31536000; includeSubDomains"}
}

#
# The following section defines, which host names map to which
# server. In our case for example, the host "localhost" is mapped to
# the nsd server named "default".
#
ns_section ns/module/nssock/servers {
    ns_param default    localhost
    ns_param default    [ns_info hostname]
}

########################################################################
#  Settings for the "default" server
########################################################################

ns_section "ns/server/default" {
    ns_param    enabletclpages      true  ;# default: false
    ns_param    checkmodifiedsince  false ;# default: true, check modified-since before returning files from cache. Disable for speedup
    ns_param    connsperthread      1000  ;# default: 0; number of connections (requests) handled per thread
    ns_param    minthreads          5     ;# default: 1; minimal number of connection threads
    ns_param    maxthreads          100   ;# default: 10; maximal number of connection threads
    ns_param    maxconnections      100   ;# default: 100; number of allocated connection structures
    ns_param    rejectoverrun       true  ;# default: false; send 503 when thread pool queue overruns
    ns_param    threadtimeout       2m    ;# default: 2m; timeout for idle threads
    #ns_param   concurrentcreatethreshold 100 ;# default: 80; perform concurrent creates when queue is fully beyond this percentage
    ;# 100 is a conservative value, disabling concurrent creates
    #ns_param    connectionratelimit 200  ;# 0; limit rate per connection to this amount (KB/s); 0 means unlimited
    #ns_param    poolratelimit       200  ;# 0; limit rate for pool to this amount (KB/s); 0 means unlimited

    # Extra server-specific response header fields
    #ns_param   extraheaders  {Referrer-Policy "strict-origin"}
}

ns_section "ns/server/default/modules" {
    ns_param    nscp                nscp
    ns_param    nslog               nslog
    ns_param    nscgi               nscgi
}

ns_section "ns/server/default/fastpath" {
    ns_param    pagedir             pages
    #ns_param   serverdir           ""
    ns_param    directoryfile       "index.adp index.tcl index.html index.htm"
    ns_param    directoryproc       _ns_dirlist
    ns_param    directorylisting    fancy    ;# default: simple
    #ns_param   directoryadp       dir.adp
}

ns_section "ns/server/default/vhost" {
    ns_param    enabled             false
    ns_param    hostprefix          ""
    ns_param    hosthashlevel       0
    ns_param    stripport           true
    ns_param    stripwww            true
}

ns_section "ns/server/default/adp" {
    ns_param    map                 "/*.adp"
    ns_param    enableexpire        false    ;# default: false; set "Expires: now" on all ADP's
    #ns_param   enabledebug         true     ;# default: false
    #ns_param   enabletclpages      true     ;# default: false
    ns_param    singlescript        false    ;# default: false; collapse Tcl blocks to a single Tcl script
    ns_param    cache               false    ;# default: false; enable ADP caching
    #ns_param    cachesize           5MB
    #ns_param    bufsize             1MB
}

ns_section "ns/server/default/tcl" {
    ns_param    nsvbuckets          16       ;# default: 8
    ns_param    library             modules/tcl
    #
    # Example for initcmds (to be executed, when this server is fully initialized).
    #
    #ns_param    initcmds {
    #    ns_log notice "=== Hello World === server: [ns_info server] running"
    #}
}

ns_section "ns/server/default/module/nscgi" {
    ns_param    map                 "GET  /cgi-bin $home/cgi-bin"
    ns_param    map                 "POST /cgi-bin $home/cgi-bin"
    ns_param    interps              CGIinterps
    #ns_param   allowstaticresources true    ;# default false; serve static resources from cgi directories
}

ns_section "ns/interps/CGIinterps" {
    ns_param	.pl		    "/opt/local/bin/perl"
    ns_param	.sh		    "/bin/bash"
}

ns_section "ns/server/default/module/nslog" {
    #ns_param   file                access.log
    #ns_param   rolllog             true     ;# default: true; should server log files automatically
    #ns_param   rollonsignal        false    ;# default: false; perform roll on a sighup
    #ns_param   rollhour            0        ;# default: 0; specify at which hour to roll
    ns_param    maxbackup           7        ;# default: 10; max number of backup log files
    #ns_param   rollfmt		    %Y-%m-%d-%H:%M	;# format appended to log file name
    #ns_param   logpartialtimes     true     ;# default: false
    #ns_param   logreqtime	    true     ;# default: false; include time to service the request
    ns_param    logthreadname       true     ;# default: false; include thread name for linking with error.log

    ns_param	masklogaddr         true    ;# false, mask IP address in log file for GDPR (like anonip IP anonymizer)
    ns_param	maskipv4            255.255.255.0  ;# mask for IPv4 addresses
    ns_param	maskipv6            ff:ff:ff:ff::  ;# mask for IPv6 addresses
}

ns_section "ns/server/default/module/nscp" {
    ns_param   port     4080
    ns_param   address  $address
}

ns_section "ns/server/default/module/nscp/users" {
    ns_param user "::"
    # ns_param user "nsadmin:t2GqvvaiIUbF2:" ;# sample user="nsadmin", pw="x".
}

set ::env(RANDFILE) $home/.rnd
set ::env(HOME) $home
set ::env(LANG) en_US.UTF-8
#
# For debugging, you might activate one of the following flags
#
#ns_logctl severity Debug(ns:driver) on
#ns_logctl severity Debug(request) on
#ns_logctl severity Debug(task) on
#ns_logctl severity Debug(sql) on
#ns_logctl severity Debug on
#+end_src
** rootfs/etc/naviserver/env-defaults :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-etc-naviserver-env-defaults
:END:
#+begin_src sh :shebang ""
  export NS_USER="${NS_USER:-nsadmin}"
  export NS_GROUP="${NS_GROUP:-nsadmin}"
  export NS_CONF="${NS_CONF:-/usr/local/ns/conf/nsd-config.tcl}"
#+end_src
** builds/env-vars.sh :code:
:PROPERTIES:
:CUSTOM_ID: builds-env-vars-sh
:END:
#+begin_src sh
  # shellcheck shell=bash
  export PREFIX="${PREFIX:-/usr/local/ns}"

  # * Versions
  export NS_VERSION="${NS_VERSION:-4.99.23}"
  export NS_MODULES_VERSION="${NS_MODULES_VERSION:-4.99.23}"
  export RL_JSON_VERSION="${RL_JSON_VERSION:-0.11.1}"
  export TDOM_VERSION="${TDOM_VERSION:-0.9.1}"
  export THREAD_VERSION="${THREAD_VERSION:-2.8.6}"
  export TCL_VERSION="${TCL_VERSION:-8.6.11}"
  export TCLLIB_VERSION="${TCLLIB_VERSION:-1.20}"
  export XOTCL_VERSION="${XOTCL_VERSION:-2.3.0}"

  # * Options
  export WGET_OPTIONS="${WGET_OPTIONS:-""}"

  # * NaviServer
  # Using for NaviServer
  # the pg_* variables should be the path leading to the include and
  # library file of postgres to be used in this build.  In particular,
  # "libpq-fe.h" and "libpq.so" are typically needed.
  export PG_INCL="/usr/include/postgresql"
  export PG_LIB="/usr/lib"
#+end_src
** builds/all-build.sh :code:
:PROPERTIES:
:CUSTOM_ID: builds-all-build-sh
:END:
#+begin_src sh
  # shellcheck shell=bash

  # shellcheck disable=SC1091
  . /VERSIONS

  sh /builds/tcl-build.sh
  sh /builds/tcllib-build.sh
  sh /builds/ns-build.sh
  sh /builds/ns-modules-build-nsdbpg.sh
  sh /builds/ns-modules-build-nsstats.sh
  sh /builds/ns-modules-build-nsconf.sh
  sh /builds/thread-build.sh
  sh /builds/xotcl-build.sh
  sh /builds/tdom-build.sh
  sh /builds/rl_json-build.sh
#+end_src
** start.sh :code:
:PROPERTIES:
:CUSTOM_ID: start-sh
:END:
#+name: start.sh
#+begin_src sh
  set -a; source ./VERSIONS ; set +a;

  IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"

  docker run -itd \
         --restart always \
         --name="${CONTAINER_NAME}" \
         -p 127.0.0.1:8090:8080 \
         "${IMAGE}"
#+end_src
* Tests :test:noexport:
:PROPERTIES:
:header-args:bats+:   :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:header-args:sh+:  :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:CUSTOM_ID: tests
:END:
** helpers.bash :test:
:PROPERTIES:
:CUSTOM_ID: helpers-bash
:END:
#+begin_src sh :shebang "" :results output pp :noweb strip-export :tangle-mode (identity #o644)
# * Load Add-ons
load '.bats-battery/bats-assert/load.bash'
load '.bats-battery/bats-file/load.bash'
load '.bats-battery/bats-support/load.bash'
#+end_src

** 01.shellchecks.bats :test:
:PROPERTIES:
:CUSTOM_ID: 01-shellchecks-bats
:END:
#+begin_src bats :results output pp :noweb strip-export :dir ../

  setup() {
      targets=()
      while IFS=  read -r -d $'\0'; do
          targets+=("$REPLY")
      done < <(
          find \
              ../src/hook \
              ../src/builds \
              -type f ! -iname ".gitignore" \
              -print0
      )
  }

  @test "Check shell files" {
        run export LC_ALL=C.UTF-8; shellcheck "${targets[@]}"
        assert_success
  }

  @test "Check VERSIONS file" {
        run export LC_ALL=C.UTF-8; shellcheck --shell=sh --exclude=SC2034 ../src/VERSIONS
        assert_success
  }

#+end_src

#+RESULTS:

** 02.dockerfile_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 02-dockerfile-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export

  @test "Check Dockerfile" {
        run docker run --rm -i -v "${PWD}/../src":/work --workdir=/work  hadolint/hadolint hadolint -f json Dockerfile
        assert_success
  }
#+end_src

** 03.docker_image_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 03-docker-image-check-bats
:END:

#+begin_src bats :results output pp :noweb strip-export

  setup() {
        . ../src/VERSIONS

        VERSION=$(
        curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
           )
    }

  @test "Check docker image" {
      run docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v "$(pwd)"/.dockleignore:/.dockleignore \
          goodwithtech/dockle:v"${VERSION}" \
          --exit-code 1 \
          --exit-level fatal \
          "${IMAGE}"
      assert_success
    }
#+end_src

#+RESULTS:
: 1..1
: ok 1 Check docker image

** 04.container_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 04-container-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export

  setup() {
      . ../src/VERSIONS
  }

  @test "Verify container run" {
      run docker run -itd \
       --restart always \
       --name="${CONTAINER_NAME}" \
       -p 127.0.0.1:8090:8080 \
       "${IMAGE}"
      assert_success
  }

  @test "Verify state status container - running" {
      sleep 5
      run docker inspect --format 'result={{ .State.Status }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=running'
  }

  @test "Verify state running container - true" {
      run docker inspect --format 'result={{ .State.Running }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=true'
  }

  @test "Verify state restarting container - false" {
      run docker inspect --format 'result={{ .State.Restarting }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=false'
  }

  @test "Verify state error container - <empty>" {
      run docker inspect --format 'result={{ .State.Error }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result='
  }

  @test "Verify restart count container - 0" {
      run docker inspect --format 'result={{ .RestartCount }}' "${CONTAINER_NAME}"
      assert_success
      assert_output 'result=0'
  }

  # @test "Verify AppArmor Profile - if applicable" {
  #       skip
  #       run docker inspect --format 'AppArmorProfile={{ .AppArmorProfile }}' "${CONTAINER_NAME}"
  #       assert_success
  #       refute_output "AppArmorProfile=[]"
  #       refute_output "AppArmorProfile="
  #       refute_output "AppArmorProfile=<no value>"
  # }

  @test "Verify container stop" {
      run docker container stop "${CONTAINER_NAME}"
      assert_success
  }

  @test "Remove container" {
      run docker container rm "${CONTAINER_NAME}" || true
      assert_success
  }

#+end_src

** shellcheck.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: shellcheck-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
  set -e

  targets=()
  while IFS=  read -r -d $'\0'; do
      targets+=("$REPLY")
  done < <(
    find \
      ../src/rootfs/etc \
      ../src/hook \
      -type f \
      -print0
    )


  echo "Shellcheck files"
  LC_ALL=C.UTF-8 shellcheck "${targets[@]}"

  # VERSION were exclude from main check (above)
  # exclude warning https://github.com/koalaman/shellcheck/wiki/SC2034
  echo "Shellcheck VERSION"
  #LC_ALL=C.UTF-8 shellcheck --shell=sh --exclude=SC2034 VERSION

  exit $?
#+end_src

** docker_image_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: docker-image-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
  set -e
  IMAGE_NAME="${1:-oupfiz5/tcl-build:latest}"

  # * Install dockle and check targets
  # Pay attention: some checks are ignored using .dockleignore
  VERSION=$(
      curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
          grep '"tag_name":' | \
          sed -E 's/.*"v([^"]+)".*/\1/' \
         ) && docker run --rm \
                         -v /var/run/docker.sock:/var/run/docker.sock \
                         -v "$(pwd)"/.dockleignore:/.dockleignore \
                         goodwithtech/dockle:v"${VERSION}" \
                         --exit-code 1 \
                         --exit-level fatal \
                         "${IMAGE_NAME}"
  exit $?
#+end_src

#+RESULTS:

** .dockleignore :test:
:PROPERTIES:
:CUSTOM_ID: -dockleignore
:END:
#+begin_src sh :shebang ""
# Use COPY instead of ADD in Dockerfile because need to add s6-overlay from urlencode
CIS-DI-0009
# Use latest tag because to check the image inside only
DKL-DI-0006
# set root to default user because it will be use for next build
CIS-DI-0001
#+end_src
** dockerfile_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: dockerfile-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
    set -e

    # * Get list of targets
    targets=()
    while IFS=  read -r -d $'\0'; do
        targets+=("$REPLY")
    done < <(
      find \
         ../src/Dockerfile \
        -type f \
        -print0
      )

    # * Pull hadolint and check targets
    echo Test Dockerfile - $(date)
    docker run --rm -i hadolint/hadolint < "${targets[@]}" && echo "Success"

    exit $?
#+end_src
